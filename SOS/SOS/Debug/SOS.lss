
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000c2a  00000cbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  00800092  00800092  00000cf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002906  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f1d  00000000  00000000  000039aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c1  00000000  00000000  000048c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  00006088  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001274  00000000  00000000  00006960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f88  00000000  00000000  00007bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  00009b5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_1>
   8:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_2>
   c:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_5>
  18:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_8>
  24:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3f       	cpi	r26, 0xFD	; 253
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 00 	call	0x126	; 0x126 <main>
  8a:	0c 94 13 06 	jmp	0xc26	; 0xc26 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task1>:

#include "app.h"

void Task1(void)
{
	led_toggle(LED_0);
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	0e 94 8b 00 	call	0x116	; 0x116 <led_toggle>
  98:	08 95       	ret

0000009a <Task2>:
}
void Task2(void)
{
	led_toggle(LED_1);
  9a:	89 e0       	ldi	r24, 0x09	; 9
  9c:	0e 94 8b 00 	call	0x116	; 0x116 <led_toggle>
  a0:	08 95       	ret

000000a2 <app_init>:
}

void app_init()
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	60 97       	sbiw	r28, 0x10	; 16
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	enu_sos_error_status_t app_error_check = SOS_STATUS_SUCCESS;
	
	GLOBALE_ENABLE();
  b6:	78 94       	sei
	sos_init();
  b8:	0e 94 9a 04 	call	0x934	; 0x934 <sos_init>
	
	str_sos_config_task_t	str_task1_config	= {1,1,3,Task1};
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	e1 e6       	ldi	r30, 0x61	; 97
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	de 01       	movw	r26, r28
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <app_init+0x24>
	str_sos_config_task_t	str_task2_config	= {2,2,5,Task2};
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	e9 e6       	ldi	r30, 0x69	; 105
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	de 01       	movw	r26, r28
  d6:	19 96       	adiw	r26, 0x09	; 9
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <app_init+0x36>
	
	app_error_check = sos_create_task(&str_task1_config);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 bd 04 	call	0x97a	; 0x97a <sos_create_task>
	app_error_check = sos_create_task(&str_task2_config);
  e8:	ce 01       	movw	r24, r28
  ea:	09 96       	adiw	r24, 0x09	; 9
  ec:	0e 94 bd 04 	call	0x97a	; 0x97a <sos_create_task>

// 	str_sos_config_task_t	str_task2_edit_config	= {2,2,20,Task2};				//modify task test
// 	sos_modify_task(&str_task2_edit_config);


	sos_run();
  f0:	0e 94 28 05 	call	0xa50	; 0xa50 <sos_run>

}
  f4:	60 96       	adiw	r28, 0x10	; 16
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <BUTTON_read>:

en_buttonError_t BUTTON_read(DIO_Pin_type button , DIO_PinVoltage_type *buttonState)
{
	en_buttonError_t  error = BUTTON_OK;
	
	if (button <32)
 106:	80 32       	cpi	r24, 0x20	; 32
 108:	20 f4       	brcc	.+8      	; 0x112 <BUTTON_read+0xc>
	{
		DIO_readpin(button,buttonState);
 10a:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_readpin>
		error = BUTTON_OK;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
	}
	else
	{
		error = WRONG_BUTTON_PIN;
 112:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return error;
} 
 114:	08 95       	ret

00000116 <led_toggle>:


en_led_Error_t led_toggle (DIO_Pin_type led)
{	
	en_led_Error_t  error = LED_OK;
	if (led <32)
 116:	80 32       	cpi	r24, 0x20	; 32
 118:	20 f4       	brcc	.+8      	; 0x122 <led_toggle+0xc>
	{
		DIO_togglepin (led);
 11a:	0e 94 00 02 	call	0x400	; 0x400 <DIO_togglepin>
		error = LED_OK;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret
	}
	else
	{
		error = WRONG_LED_PIN;
 122:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return error;
}
 124:	08 95       	ret

00000126 <main>:
 */ 
#include "app/app.h"

int main()
{
	app_init();
 126:	0e 94 51 00 	call	0xa2	; 0xa2 <app_init>
	{
		app_start();
	}
*/	

}
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret

00000130 <DIO_initpin>:
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
 130:	98 2f       	mov	r25, r24
 132:	96 95       	lsr	r25
 134:	96 95       	lsr	r25
 136:	96 95       	lsr	r25
 138:	87 70       	andi	r24, 0x07	; 7
 13a:	61 30       	cpi	r22, 0x01	; 1
 13c:	09 f4       	brne	.+2      	; 0x140 <DIO_initpin+0x10>
 13e:	59 c0       	rjmp	.+178    	; 0x1f2 <DIO_initpin+0xc2>
 140:	20 f0       	brcs	.+8      	; 0x14a <DIO_initpin+0x1a>
 142:	62 30       	cpi	r22, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_initpin+0x18>
 146:	a9 c0       	rjmp	.+338    	; 0x29a <DIO_initpin+0x16a>
 148:	fc c0       	rjmp	.+504    	; 0x342 <DIO_initpin+0x212>
 14a:	91 30       	cpi	r25, 0x01	; 1
 14c:	c9 f0       	breq	.+50     	; 0x180 <DIO_initpin+0x50>
 14e:	28 f0       	brcs	.+10     	; 0x15a <DIO_initpin+0x2a>
 150:	92 30       	cpi	r25, 0x02	; 2
 152:	49 f1       	breq	.+82     	; 0x1a6 <DIO_initpin+0x76>
 154:	93 30       	cpi	r25, 0x03	; 3
 156:	d1 f1       	breq	.+116    	; 0x1cc <DIO_initpin+0x9c>
 158:	f6 c0       	rjmp	.+492    	; 0x346 <DIO_initpin+0x216>
 15a:	4a b3       	in	r20, 0x1a	; 26
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_initpin+0x38>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	8a 95       	dec	r24
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_initpin+0x34>
 16c:	cb 01       	movw	r24, r22
 16e:	94 2f       	mov	r25, r20
 170:	98 2b       	or	r25, r24
 172:	9a bb       	out	0x1a, r25	; 26
 174:	9b b3       	in	r25, 0x1b	; 27
 176:	80 95       	com	r24
 178:	89 23       	and	r24, r25
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
 180:	47 b3       	in	r20, 0x17	; 23
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_initpin+0x5e>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_initpin+0x5a>
 192:	cb 01       	movw	r24, r22
 194:	94 2f       	mov	r25, r20
 196:	98 2b       	or	r25, r24
 198:	97 bb       	out	0x17, r25	; 23
 19a:	98 b3       	in	r25, 0x18	; 24
 19c:	80 95       	com	r24
 19e:	89 23       	and	r24, r25
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	44 b3       	in	r20, 0x14	; 20
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_initpin+0x84>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_initpin+0x80>
 1b8:	cb 01       	movw	r24, r22
 1ba:	94 2f       	mov	r25, r20
 1bc:	98 2b       	or	r25, r24
 1be:	94 bb       	out	0x14, r25	; 20
 1c0:	95 b3       	in	r25, 0x15	; 21
 1c2:	80 95       	com	r24
 1c4:	89 23       	and	r24, r25
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
 1cc:	41 b3       	in	r20, 0x11	; 17
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_initpin+0xaa>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_initpin+0xa6>
 1de:	cb 01       	movw	r24, r22
 1e0:	94 2f       	mov	r25, r20
 1e2:	98 2b       	or	r25, r24
 1e4:	91 bb       	out	0x11, r25	; 17
 1e6:	92 b3       	in	r25, 0x12	; 18
 1e8:	80 95       	com	r24
 1ea:	89 23       	and	r24, r25
 1ec:	82 bb       	out	0x12, r24	; 18
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
 1f2:	91 30       	cpi	r25, 0x01	; 1
 1f4:	c9 f0       	breq	.+50     	; 0x228 <DIO_initpin+0xf8>
 1f6:	28 f0       	brcs	.+10     	; 0x202 <DIO_initpin+0xd2>
 1f8:	92 30       	cpi	r25, 0x02	; 2
 1fa:	49 f1       	breq	.+82     	; 0x24e <DIO_initpin+0x11e>
 1fc:	93 30       	cpi	r25, 0x03	; 3
 1fe:	d1 f1       	breq	.+116    	; 0x274 <DIO_initpin+0x144>
 200:	a4 c0       	rjmp	.+328    	; 0x34a <DIO_initpin+0x21a>
 202:	4a b3       	in	r20, 0x1a	; 26
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_initpin+0xe0>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_initpin+0xdc>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	94 2f       	mov	r25, r20
 21a:	98 23       	and	r25, r24
 21c:	9a bb       	out	0x1a, r25	; 26
 21e:	9b b3       	in	r25, 0x1b	; 27
 220:	89 23       	and	r24, r25
 222:	8b bb       	out	0x1b, r24	; 27
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
 228:	47 b3       	in	r20, 0x17	; 23
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_initpin+0x106>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_initpin+0x102>
 23a:	cb 01       	movw	r24, r22
 23c:	80 95       	com	r24
 23e:	94 2f       	mov	r25, r20
 240:	98 23       	and	r25, r24
 242:	97 bb       	out	0x17, r25	; 23
 244:	98 b3       	in	r25, 0x18	; 24
 246:	89 23       	and	r24, r25
 248:	88 bb       	out	0x18, r24	; 24
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	44 b3       	in	r20, 0x14	; 20
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_initpin+0x12c>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_initpin+0x128>
 260:	cb 01       	movw	r24, r22
 262:	80 95       	com	r24
 264:	94 2f       	mov	r25, r20
 266:	98 23       	and	r25, r24
 268:	94 bb       	out	0x14, r25	; 20
 26a:	95 b3       	in	r25, 0x15	; 21
 26c:	89 23       	and	r24, r25
 26e:	85 bb       	out	0x15, r24	; 21
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	08 95       	ret
 274:	41 b3       	in	r20, 0x11	; 17
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_initpin+0x152>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_initpin+0x14e>
 286:	cb 01       	movw	r24, r22
 288:	80 95       	com	r24
 28a:	94 2f       	mov	r25, r20
 28c:	98 23       	and	r25, r24
 28e:	91 bb       	out	0x11, r25	; 17
 290:	92 b3       	in	r25, 0x12	; 18
 292:	89 23       	and	r24, r25
 294:	82 bb       	out	0x12, r24	; 18
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
 29a:	91 30       	cpi	r25, 0x01	; 1
 29c:	c9 f0       	breq	.+50     	; 0x2d0 <DIO_initpin+0x1a0>
 29e:	28 f0       	brcs	.+10     	; 0x2aa <DIO_initpin+0x17a>
 2a0:	92 30       	cpi	r25, 0x02	; 2
 2a2:	49 f1       	breq	.+82     	; 0x2f6 <DIO_initpin+0x1c6>
 2a4:	93 30       	cpi	r25, 0x03	; 3
 2a6:	d1 f1       	breq	.+116    	; 0x31c <DIO_initpin+0x1ec>
 2a8:	52 c0       	rjmp	.+164    	; 0x34e <DIO_initpin+0x21e>
 2aa:	4a b3       	in	r20, 0x1a	; 26
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	b9 01       	movw	r22, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_initpin+0x188>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_initpin+0x184>
 2bc:	cb 01       	movw	r24, r22
 2be:	96 2f       	mov	r25, r22
 2c0:	90 95       	com	r25
 2c2:	94 23       	and	r25, r20
 2c4:	9a bb       	out	0x1a, r25	; 26
 2c6:	9b b3       	in	r25, 0x1b	; 27
 2c8:	89 2b       	or	r24, r25
 2ca:	8b bb       	out	0x1b, r24	; 27
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	47 b3       	in	r20, 0x17	; 23
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	b9 01       	movw	r22, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_initpin+0x1ae>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	8a 95       	dec	r24
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_initpin+0x1aa>
 2e2:	cb 01       	movw	r24, r22
 2e4:	96 2f       	mov	r25, r22
 2e6:	90 95       	com	r25
 2e8:	94 23       	and	r25, r20
 2ea:	97 bb       	out	0x17, r25	; 23
 2ec:	98 b3       	in	r25, 0x18	; 24
 2ee:	89 2b       	or	r24, r25
 2f0:	88 bb       	out	0x18, r24	; 24
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
 2f6:	44 b3       	in	r20, 0x14	; 20
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_initpin+0x1d4>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_initpin+0x1d0>
 308:	cb 01       	movw	r24, r22
 30a:	96 2f       	mov	r25, r22
 30c:	90 95       	com	r25
 30e:	94 23       	and	r25, r20
 310:	94 bb       	out	0x14, r25	; 20
 312:	95 b3       	in	r25, 0x15	; 21
 314:	89 2b       	or	r24, r25
 316:	85 bb       	out	0x15, r24	; 21
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret
 31c:	41 b3       	in	r20, 0x11	; 17
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_initpin+0x1fa>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_initpin+0x1f6>
 32e:	cb 01       	movw	r24, r22
 330:	96 2f       	mov	r25, r22
 332:	90 95       	com	r25
 334:	94 23       	and	r25, r20
 336:	91 bb       	out	0x11, r25	; 17
 338:	92 b3       	in	r25, 0x12	; 18
 33a:	89 2b       	or	r24, r25
 33c:	82 bb       	out	0x12, r24	; 18
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	08 95       	ret
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	08 95       	ret

00000352 <DIO_Init_All>:
 352:	cf 93       	push	r28
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	09 c0       	rjmp	.+18     	; 0x36a <DIO_Init_All+0x18>
 358:	ec 2f       	mov	r30, r28
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ef 58       	subi	r30, 0x8F	; 143
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	60 81       	ld	r22, Z
 362:	8c 2f       	mov	r24, r28
 364:	0e 94 98 00 	call	0x130	; 0x130 <DIO_initpin>
 368:	cf 5f       	subi	r28, 0xFF	; 255
 36a:	c0 32       	cpi	r28, 0x20	; 32
 36c:	a8 f3       	brcs	.-22     	; 0x358 <DIO_Init_All+0x6>
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <DIO_readpin>:
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
 372:	98 2f       	mov	r25, r24
 374:	96 95       	lsr	r25
 376:	96 95       	lsr	r25
 378:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 37a:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num < 8)
	  {

		  switch(port)
 37c:	91 30       	cpi	r25, 0x01	; 1
 37e:	a1 f0       	breq	.+40     	; 0x3a8 <DIO_readpin+0x36>
 380:	28 f0       	brcs	.+10     	; 0x38c <DIO_readpin+0x1a>
 382:	92 30       	cpi	r25, 0x02	; 2
 384:	f9 f0       	breq	.+62     	; 0x3c4 <DIO_readpin+0x52>
 386:	93 30       	cpi	r25, 0x03	; 3
 388:	59 f1       	breq	.+86     	; 0x3e0 <DIO_readpin+0x6e>
 38a:	38 c0       	rjmp	.+112    	; 0x3fc <DIO_readpin+0x8a>
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
 38c:	29 b3       	in	r18, 0x19	; 25
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	a9 01       	movw	r20, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_readpin+0x26>
 394:	55 95       	asr	r21
 396:	47 95       	ror	r20
 398:	8a 95       	dec	r24
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_readpin+0x22>
 39c:	ca 01       	movw	r24, r20
 39e:	81 70       	andi	r24, 0x01	; 1
 3a0:	fb 01       	movw	r30, r22
 3a2:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
		  switch(port)
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
			  break;
 3a6:	08 95       	ret
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
 3a8:	26 b3       	in	r18, 0x16	; 22
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	a9 01       	movw	r20, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_readpin+0x42>
 3b0:	55 95       	asr	r21
 3b2:	47 95       	ror	r20
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_readpin+0x3e>
 3b8:	ca 01       	movw	r24, r20
 3ba:	81 70       	andi	r24, 0x01	; 1
 3bc:	fb 01       	movw	r30, r22
 3be:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINA,pin_num);
			  break;
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
			  break;
 3c2:	08 95       	ret
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
 3c4:	23 b3       	in	r18, 0x13	; 19
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	a9 01       	movw	r20, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_readpin+0x5e>
 3cc:	55 95       	asr	r21
 3ce:	47 95       	ror	r20
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_readpin+0x5a>
 3d4:	ca 01       	movw	r24, r20
 3d6:	81 70       	andi	r24, 0x01	; 1
 3d8:	fb 01       	movw	r30, r22
 3da:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINB,pin_num);
			  break;
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
			  break;
 3de:	08 95       	ret
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
 3e0:	20 b3       	in	r18, 0x10	; 16
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	a9 01       	movw	r20, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_readpin+0x7a>
 3e8:	55 95       	asr	r21
 3ea:	47 95       	ror	r20
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_readpin+0x76>
 3f0:	ca 01       	movw	r24, r20
 3f2:	81 70       	andi	r24, 0x01	; 1
 3f4:	fb 01       	movw	r30, r22
 3f6:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINC,pin_num);
			  break;
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
			  break;
 3fa:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
 3fe:	08 95       	ret

00000400 <DIO_togglepin>:
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
 400:	98 2f       	mov	r25, r24
 402:	96 95       	lsr	r25
 404:	96 95       	lsr	r25
 406:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 408:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num< 8)
	  {
		  switch(port)
 40a:	91 30       	cpi	r25, 0x01	; 1
 40c:	a1 f0       	breq	.+40     	; 0x436 <DIO_togglepin+0x36>
 40e:	28 f0       	brcs	.+10     	; 0x41a <DIO_togglepin+0x1a>
 410:	92 30       	cpi	r25, 0x02	; 2
 412:	f9 f0       	breq	.+62     	; 0x452 <DIO_togglepin+0x52>
 414:	93 30       	cpi	r25, 0x03	; 3
 416:	59 f1       	breq	.+86     	; 0x46e <DIO_togglepin+0x6e>
 418:	38 c0       	rjmp	.+112    	; 0x48a <DIO_togglepin+0x8a>
		  {
			  case PA:
			  TGL_BIT(PORTA,pin_num);
 41a:	4b b3       	in	r20, 0x1b	; 27
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_togglepin+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	8a 95       	dec	r24
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_togglepin+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	84 27       	eor	r24, r20
 430:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 432:	80 e0       	ldi	r24, 0x00	; 0
	  {
		  switch(port)
		  {
			  case PA:
			  TGL_BIT(PORTA,pin_num);
			  break;
 434:	08 95       	ret
			  case PB:
			  TGL_BIT(PORTB,pin_num);
 436:	48 b3       	in	r20, 0x18	; 24
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	b9 01       	movw	r22, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_togglepin+0x44>
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	8a 95       	dec	r24
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_togglepin+0x40>
 448:	cb 01       	movw	r24, r22
 44a:	84 27       	eor	r24, r20
 44c:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 44e:	80 e0       	ldi	r24, 0x00	; 0
			  case PA:
			  TGL_BIT(PORTA,pin_num);
			  break;
			  case PB:
			  TGL_BIT(PORTB,pin_num);
			  break;
 450:	08 95       	ret
			  case PC:
			  TGL_BIT(PORTC,pin_num);
 452:	45 b3       	in	r20, 0x15	; 21
 454:	21 e0       	ldi	r18, 0x01	; 1
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	b9 01       	movw	r22, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_togglepin+0x60>
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_togglepin+0x5c>
 464:	cb 01       	movw	r24, r22
 466:	84 27       	eor	r24, r20
 468:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 46a:	80 e0       	ldi	r24, 0x00	; 0
			  case PB:
			  TGL_BIT(PORTB,pin_num);
			  break;
			  case PC:
			  TGL_BIT(PORTC,pin_num);
			  break;
 46c:	08 95       	ret
			  case PD:
			  TGL_BIT(PORTD,pin_num);
 46e:	42 b3       	in	r20, 0x12	; 18
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_togglepin+0x7c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_togglepin+0x78>
 480:	cb 01       	movw	r24, r22
 482:	84 27       	eor	r24, r20
 484:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 486:	80 e0       	ldi	r24, 0x00	; 0
			  case PC:
			  TGL_BIT(PORTC,pin_num);
			  break;
			  case PD:
			  TGL_BIT(PORTD,pin_num);
			  break;
 488:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
 48a:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
 48c:	08 95       	ret

0000048e <EXI_Enable>:
		break;
		case EX_INT1:
		CLR_BIT(GICR,INT1);
		break;
		case EX_INT2:
		CLR_BIT(GICR,INT2);
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	41 f0       	breq	.+16     	; 0x4a2 <EXI_Enable+0x14>
 492:	18 f0       	brcs	.+6      	; 0x49a <EXI_Enable+0xc>
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	49 f0       	breq	.+18     	; 0x4aa <EXI_Enable+0x1c>
 498:	08 95       	ret
 49a:	8b b7       	in	r24, 0x3b	; 59
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	8b bf       	out	0x3b, r24	; 59
 4a0:	08 95       	ret
 4a2:	8b b7       	in	r24, 0x3b	; 59
 4a4:	80 68       	ori	r24, 0x80	; 128
 4a6:	8b bf       	out	0x3b, r24	; 59
 4a8:	08 95       	ret
 4aa:	8b b7       	in	r24, 0x3b	; 59
 4ac:	80 62       	ori	r24, 0x20	; 32
 4ae:	8b bf       	out	0x3b, r24	; 59
 4b0:	08 95       	ret

000004b2 <EXI_TriggerEdge>:


/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
	switch(Interrupt){
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	49 f1       	breq	.+82     	; 0x508 <EXI_TriggerEdge+0x56>
 4b6:	20 f0       	brcs	.+8      	; 0x4c0 <EXI_TriggerEdge+0xe>
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	09 f4       	brne	.+2      	; 0x4be <EXI_TriggerEdge+0xc>
 4bc:	49 c0       	rjmp	.+146    	; 0x550 <EXI_TriggerEdge+0x9e>
 4be:	08 95       	ret
		case EX_INT0:
		switch(Edge){
 4c0:	61 30       	cpi	r22, 0x01	; 1
 4c2:	69 f0       	breq	.+26     	; 0x4de <EXI_TriggerEdge+0x2c>
 4c4:	28 f0       	brcs	.+10     	; 0x4d0 <EXI_TriggerEdge+0x1e>
 4c6:	62 30       	cpi	r22, 0x02	; 2
 4c8:	89 f0       	breq	.+34     	; 0x4ec <EXI_TriggerEdge+0x3a>
 4ca:	63 30       	cpi	r22, 0x03	; 3
 4cc:	b1 f0       	breq	.+44     	; 0x4fa <EXI_TriggerEdge+0x48>
 4ce:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
 4d0:	85 b7       	in	r24, 0x35	; 53
 4d2:	8e 7f       	andi	r24, 0xFE	; 254
 4d4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 4d6:	85 b7       	in	r24, 0x35	; 53
 4d8:	8d 7f       	andi	r24, 0xFD	; 253
 4da:	85 bf       	out	0x35, r24	; 53
			break;
 4dc:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
 4de:	85 b7       	in	r24, 0x35	; 53
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 4e4:	85 b7       	in	r24, 0x35	; 53
 4e6:	8d 7f       	andi	r24, 0xFD	; 253
 4e8:	85 bf       	out	0x35, r24	; 53
			break;
 4ea:	08 95       	ret
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
 4ec:	85 b7       	in	r24, 0x35	; 53
 4ee:	8e 7f       	andi	r24, 0xFE	; 254
 4f0:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 4f2:	85 b7       	in	r24, 0x35	; 53
 4f4:	82 60       	ori	r24, 0x02	; 2
 4f6:	85 bf       	out	0x35, r24	; 53
			break;
 4f8:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 4fa:	85 b7       	in	r24, 0x35	; 53
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 500:	85 b7       	in	r24, 0x35	; 53
 502:	82 60       	ori	r24, 0x02	; 2
 504:	85 bf       	out	0x35, r24	; 53
			break;
 506:	08 95       	ret
			
		}
		break;
		case EX_INT1:
		switch(Edge){
 508:	61 30       	cpi	r22, 0x01	; 1
 50a:	69 f0       	breq	.+26     	; 0x526 <EXI_TriggerEdge+0x74>
 50c:	28 f0       	brcs	.+10     	; 0x518 <EXI_TriggerEdge+0x66>
 50e:	62 30       	cpi	r22, 0x02	; 2
 510:	89 f0       	breq	.+34     	; 0x534 <EXI_TriggerEdge+0x82>
 512:	63 30       	cpi	r22, 0x03	; 3
 514:	b1 f0       	breq	.+44     	; 0x542 <EXI_TriggerEdge+0x90>
 516:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
 518:	85 b7       	in	r24, 0x35	; 53
 51a:	8b 7f       	andi	r24, 0xFB	; 251
 51c:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 51e:	85 b7       	in	r24, 0x35	; 53
 520:	87 7f       	andi	r24, 0xF7	; 247
 522:	85 bf       	out	0x35, r24	; 53
			break;
 524:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
 526:	85 b7       	in	r24, 0x35	; 53
 528:	84 60       	ori	r24, 0x04	; 4
 52a:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 52c:	85 b7       	in	r24, 0x35	; 53
 52e:	87 7f       	andi	r24, 0xF7	; 247
 530:	85 bf       	out	0x35, r24	; 53
			break;
 532:	08 95       	ret
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
 534:	85 b7       	in	r24, 0x35	; 53
 536:	8b 7f       	andi	r24, 0xFB	; 251
 538:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 53a:	85 b7       	in	r24, 0x35	; 53
 53c:	88 60       	ori	r24, 0x08	; 8
 53e:	85 bf       	out	0x35, r24	; 53
			break;
 540:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 542:	85 b7       	in	r24, 0x35	; 53
 544:	84 60       	ori	r24, 0x04	; 4
 546:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 548:	85 b7       	in	r24, 0x35	; 53
 54a:	88 60       	ori	r24, 0x08	; 8
 54c:	85 bf       	out	0x35, r24	; 53
			break;
 54e:	08 95       	ret
			
		}
		break;
		case EX_INT2:
		switch(Edge){
 550:	62 30       	cpi	r22, 0x02	; 2
 552:	19 f0       	breq	.+6      	; 0x55a <EXI_TriggerEdge+0xa8>
 554:	63 30       	cpi	r22, 0x03	; 3
 556:	29 f0       	breq	.+10     	; 0x562 <EXI_TriggerEdge+0xb0>
 558:	08 c0       	rjmp	.+16     	; 0x56a <EXI_TriggerEdge+0xb8>
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
 55a:	84 b7       	in	r24, 0x34	; 52
 55c:	8f 7b       	andi	r24, 0xBF	; 191
 55e:	84 bf       	out	0x34, r24	; 52
			break;
 560:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 562:	84 b7       	in	r24, 0x34	; 52
 564:	80 64       	ori	r24, 0x40	; 64
 566:	84 bf       	out	0x34, r24	; 52
			break;
 568:	08 95       	ret
			default:
			CLR_BIT(MCUCSR,ISC2);
 56a:	84 b7       	in	r24, 0x34	; 52
 56c:	8f 7b       	andi	r24, 0xBF	; 191
 56e:	84 bf       	out	0x34, r24	; 52
 570:	08 95       	ret

00000572 <EXI_Init>:
	}
}

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 59 02 	call	0x4b2	; 0x4b2 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
 57a:	62 e0       	ldi	r22, 0x02	; 2
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
 582:	62 e0       	ldi	r22, 0x02	; 2
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	0e 94 59 02 	call	0x4b2	; 0x4b2 <EXI_TriggerEdge>
 58a:	08 95       	ret

0000058c <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	49 f0       	breq	.+18     	; 0x5a2 <EXI_SetCallBack+0x16>
 590:	18 f0       	brcs	.+6      	; 0x598 <EXI_SetCallBack+0xc>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	59 f0       	breq	.+22     	; 0x5ac <EXI_SetCallBack+0x20>
 596:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
 598:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <INT0_Fptr+0x1>
 59c:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <INT0_Fptr>
		break;
 5a0:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
 5a2:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <INT1_Fptr+0x1>
 5a6:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <INT1_Fptr>
		break;
 5aa:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
 5ac:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <__data_end+0x1>
 5b0:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <__data_end>
 5b4:	08 95       	ret

000005b6 <__vector_1>:




ISR(INT0_vect)
{  
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 5d8:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <INT0_Fptr>
 5dc:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <INT0_Fptr+0x1>
 5e0:	30 97       	sbiw	r30, 0x00	; 0
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <__vector_1+0x30>
	{
		INT0_Fptr();
 5e4:	09 95       	icall
	}
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_2>:
ISR(INT1_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 62a:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <INT1_Fptr>
 62e:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <INT1_Fptr+0x1>
 632:	30 97       	sbiw	r30, 0x00	; 0
 634:	09 f0       	breq	.+2      	; 0x638 <__vector_2+0x30>
	{
		INT1_Fptr();
 636:	09 95       	icall
	}
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__vector_3>:
ISR(INT2_vect)
{
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	2f 93       	push	r18
 666:	3f 93       	push	r19
 668:	4f 93       	push	r20
 66a:	5f 93       	push	r21
 66c:	6f 93       	push	r22
 66e:	7f 93       	push	r23
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	af 93       	push	r26
 676:	bf 93       	push	r27
 678:	ef 93       	push	r30
 67a:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 67c:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 680:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <__data_end+0x1>
 684:	30 97       	sbiw	r30, 0x00	; 0
 686:	09 f0       	breq	.+2      	; 0x68a <__vector_3+0x30>
	{
		INT2_Fptr();
 688:	09 95       	icall
	}
}
 68a:	ff 91       	pop	r31
 68c:	ef 91       	pop	r30
 68e:	bf 91       	pop	r27
 690:	af 91       	pop	r26
 692:	9f 91       	pop	r25
 694:	8f 91       	pop	r24
 696:	7f 91       	pop	r23
 698:	6f 91       	pop	r22
 69a:	5f 91       	pop	r21
 69c:	4f 91       	pop	r20
 69e:	3f 91       	pop	r19
 6a0:	2f 91       	pop	r18
 6a2:	0f 90       	pop	r0
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	0f 90       	pop	r0
 6a8:	1f 90       	pop	r1
 6aa:	18 95       	reti

000006ac <TIMER0_Init>:
	CLR_BIT(TIMSK,TOIE2);
}
/*Timer-2 Call Back functions*/
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	69 f0       	breq	.+26     	; 0x6ca <TIMER0_Init+0x1e>
 6b0:	28 f0       	brcs	.+10     	; 0x6bc <TIMER0_Init+0x10>
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	89 f0       	breq	.+34     	; 0x6d8 <TIMER0_Init+0x2c>
 6b6:	83 30       	cpi	r24, 0x03	; 3
 6b8:	b1 f0       	breq	.+44     	; 0x6e6 <TIMER0_Init+0x3a>
 6ba:	08 95       	ret
 6bc:	83 b7       	in	r24, 0x33	; 51
 6be:	8f 7b       	andi	r24, 0xBF	; 191
 6c0:	83 bf       	out	0x33, r24	; 51
 6c2:	83 b7       	in	r24, 0x33	; 51
 6c4:	87 7f       	andi	r24, 0xF7	; 247
 6c6:	83 bf       	out	0x33, r24	; 51
 6c8:	08 95       	ret
 6ca:	83 b7       	in	r24, 0x33	; 51
 6cc:	80 64       	ori	r24, 0x40	; 64
 6ce:	83 bf       	out	0x33, r24	; 51
 6d0:	83 b7       	in	r24, 0x33	; 51
 6d2:	87 7f       	andi	r24, 0xF7	; 247
 6d4:	83 bf       	out	0x33, r24	; 51
 6d6:	08 95       	ret
 6d8:	83 b7       	in	r24, 0x33	; 51
 6da:	8f 7b       	andi	r24, 0xBF	; 191
 6dc:	83 bf       	out	0x33, r24	; 51
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	88 60       	ori	r24, 0x08	; 8
 6e2:	83 bf       	out	0x33, r24	; 51
 6e4:	08 95       	ret
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	80 64       	ori	r24, 0x40	; 64
 6ea:	83 bf       	out	0x33, r24	; 51
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	88 60       	ori	r24, 0x08	; 8
 6f0:	83 bf       	out	0x33, r24	; 51
 6f2:	08 95       	ret

000006f4 <timer_start>:
 6f4:	88 30       	cpi	r24, 0x08	; 8
 6f6:	40 f4       	brcc	.+16     	; 0x708 <timer_start+0x14>
 6f8:	93 b7       	in	r25, 0x33	; 51
 6fa:	98 7f       	andi	r25, 0xF8	; 248
 6fc:	93 bf       	out	0x33, r25	; 51
 6fe:	93 b7       	in	r25, 0x33	; 51
 700:	89 2b       	or	r24, r25
 702:	83 bf       	out	0x33, r24	; 51
 704:	84 e0       	ldi	r24, 0x04	; 4
 706:	08 95       	ret
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	08 95       	ret

0000070c <timer_stop>:
 70c:	83 b7       	in	r24, 0x33	; 51
 70e:	13 be       	out	0x33, r1	; 51
 710:	08 95       	ret

00000712 <TIMER0_OV_SetCallBack>:
 712:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <Timer0_OVF_Fptr+0x1>
 716:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <Timer0_OVF_Fptr>
 71a:	08 95       	ret

0000071c <__vector_11>:
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	2f 93       	push	r18
 728:	3f 93       	push	r19
 72a:	4f 93       	push	r20
 72c:	5f 93       	push	r21
 72e:	6f 93       	push	r22
 730:	7f 93       	push	r23
 732:	8f 93       	push	r24
 734:	9f 93       	push	r25
 736:	af 93       	push	r26
 738:	bf 93       	push	r27
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
 73e:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Timer0_OVF_Fptr>
 742:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Timer0_OVF_Fptr+0x1>
 746:	30 97       	sbiw	r30, 0x00	; 0
 748:	09 f0       	breq	.+2      	; 0x74c <__vector_11+0x30>
 74a:	09 95       	icall
 74c:	ff 91       	pop	r31
 74e:	ef 91       	pop	r30
 750:	bf 91       	pop	r27
 752:	af 91       	pop	r26
 754:	9f 91       	pop	r25
 756:	8f 91       	pop	r24
 758:	7f 91       	pop	r23
 75a:	6f 91       	pop	r22
 75c:	5f 91       	pop	r21
 75e:	4f 91       	pop	r20
 760:	3f 91       	pop	r19
 762:	2f 91       	pop	r18
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <TIMER0_OV_InterruptEnable>:
 76e:	89 b7       	in	r24, 0x39	; 57
 770:	81 60       	ori	r24, 0x01	; 1
 772:	89 bf       	out	0x39, r24	; 57
 774:	08 95       	ret

00000776 <__vector_9>:
 776:	1f 92       	push	r1
 778:	0f 92       	push	r0
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	2f 93       	push	r18
 782:	3f 93       	push	r19
 784:	4f 93       	push	r20
 786:	5f 93       	push	r21
 788:	6f 93       	push	r22
 78a:	7f 93       	push	r23
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	af 93       	push	r26
 792:	bf 93       	push	r27
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
 798:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Timer1_OVF_Fptr>
 79c:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Timer1_OVF_Fptr+0x1>
 7a0:	30 97       	sbiw	r30, 0x00	; 0
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <__vector_9+0x30>
 7a4:	09 95       	icall
 7a6:	ff 91       	pop	r31
 7a8:	ef 91       	pop	r30
 7aa:	bf 91       	pop	r27
 7ac:	af 91       	pop	r26
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	7f 91       	pop	r23
 7b4:	6f 91       	pop	r22
 7b6:	5f 91       	pop	r21
 7b8:	4f 91       	pop	r20
 7ba:	3f 91       	pop	r19
 7bc:	2f 91       	pop	r18
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <__vector_8>:
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	2f 93       	push	r18
 7d4:	3f 93       	push	r19
 7d6:	4f 93       	push	r20
 7d8:	5f 93       	push	r21
 7da:	6f 93       	push	r22
 7dc:	7f 93       	push	r23
 7de:	8f 93       	push	r24
 7e0:	9f 93       	push	r25
 7e2:	af 93       	push	r26
 7e4:	bf 93       	push	r27
 7e6:	ef 93       	push	r30
 7e8:	ff 93       	push	r31
 7ea:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Timer1_OCB_Fptr>
 7ee:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Timer1_OCB_Fptr+0x1>
 7f2:	30 97       	sbiw	r30, 0x00	; 0
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <__vector_8+0x30>
 7f6:	09 95       	icall
 7f8:	ff 91       	pop	r31
 7fa:	ef 91       	pop	r30
 7fc:	bf 91       	pop	r27
 7fe:	af 91       	pop	r26
 800:	9f 91       	pop	r25
 802:	8f 91       	pop	r24
 804:	7f 91       	pop	r23
 806:	6f 91       	pop	r22
 808:	5f 91       	pop	r21
 80a:	4f 91       	pop	r20
 80c:	3f 91       	pop	r19
 80e:	2f 91       	pop	r18
 810:	0f 90       	pop	r0
 812:	0f be       	out	0x3f, r0	; 63
 814:	0f 90       	pop	r0
 816:	1f 90       	pop	r1
 818:	18 95       	reti

0000081a <__vector_6>:
 81a:	1f 92       	push	r1
 81c:	0f 92       	push	r0
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	0f 92       	push	r0
 822:	11 24       	eor	r1, r1
 824:	2f 93       	push	r18
 826:	3f 93       	push	r19
 828:	4f 93       	push	r20
 82a:	5f 93       	push	r21
 82c:	6f 93       	push	r22
 82e:	7f 93       	push	r23
 830:	8f 93       	push	r24
 832:	9f 93       	push	r25
 834:	af 93       	push	r26
 836:	bf 93       	push	r27
 838:	ef 93       	push	r30
 83a:	ff 93       	push	r31
 83c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Timer1_ICU_Fptr>
 840:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Timer1_ICU_Fptr+0x1>
 844:	30 97       	sbiw	r30, 0x00	; 0
 846:	09 f0       	breq	.+2      	; 0x84a <__vector_6+0x30>
 848:	09 95       	icall
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	bf 91       	pop	r27
 850:	af 91       	pop	r26
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	7f 91       	pop	r23
 858:	6f 91       	pop	r22
 85a:	5f 91       	pop	r21
 85c:	4f 91       	pop	r20
 85e:	3f 91       	pop	r19
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <__vector_5>:
}
/*Timer-2 ISR functions*/
ISR(TIMER2_OV_vect)
{
 86c:	1f 92       	push	r1
 86e:	0f 92       	push	r0
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	0f 92       	push	r0
 874:	11 24       	eor	r1, r1
 876:	2f 93       	push	r18
 878:	3f 93       	push	r19
 87a:	4f 93       	push	r20
 87c:	5f 93       	push	r21
 87e:	6f 93       	push	r22
 880:	7f 93       	push	r23
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
 88e:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Timer2_OVF_Fptr>
 892:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Timer2_OVF_Fptr+0x1>
 896:	30 97       	sbiw	r30, 0x00	; 0
 898:	09 f0       	breq	.+2      	; 0x89c <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
 89a:	09 95       	icall
	}
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <sos_scheduler>:
	{
		sos_error_status = SOS_STATUS_INVALID_ARGS;
	}
	
	return sos_error_status;
}
 8be:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u8_counter.2069>
 8c2:	84 36       	cpi	r24, 0x64	; 100
 8c4:	41 f5       	brne	.+80     	; 0x916 <sos_scheduler+0x58>
 8c6:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <u64_g_periodic_check_time>
 8ca:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <u64_g_periodic_check_time+0x1>
 8ce:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <u64_g_periodic_check_time+0x2>
 8d2:	50 91 f7 00 	lds	r21, 0x00F7	; 0x8000f7 <u64_g_periodic_check_time+0x3>
 8d6:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <u64_g_periodic_check_time+0x4>
 8da:	70 91 f9 00 	lds	r23, 0x00F9	; 0x8000f9 <u64_g_periodic_check_time+0x5>
 8de:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u64_g_periodic_check_time+0x6>
 8e2:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <u64_g_periodic_check_time+0x7>
 8e6:	a1 e0       	ldi	r26, 0x01	; 1
 8e8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__adddi3_s8>
 8ec:	20 93 f4 00 	sts	0x00F4, r18	; 0x8000f4 <u64_g_periodic_check_time>
 8f0:	30 93 f5 00 	sts	0x00F5, r19	; 0x8000f5 <u64_g_periodic_check_time+0x1>
 8f4:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <u64_g_periodic_check_time+0x2>
 8f8:	50 93 f7 00 	sts	0x00F7, r21	; 0x8000f7 <u64_g_periodic_check_time+0x3>
 8fc:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <u64_g_periodic_check_time+0x4>
 900:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <u64_g_periodic_check_time+0x5>
 904:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u64_g_periodic_check_time+0x6>
 908:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <u64_g_periodic_check_time+0x7>
 90c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u8_counter.2069>
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <u8_check_flag>
 916:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u8_counter.2069>
 91a:	8f 5f       	subi	r24, 0xFF	; 255
 91c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <u8_counter.2069>
 920:	08 95       	ret

00000922 <sos_disable>:
 922:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_g_init_counter>
 926:	81 30       	cpi	r24, 0x01	; 1
 928:	21 f4       	brne	.+8      	; 0x932 <sos_disable+0x10>
 92a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 92e:	0e 94 86 03 	call	0x70c	; 0x70c <timer_stop>
 932:	08 95       	ret

00000934 <sos_init>:
 934:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_g_init_counter>
 938:	81 11       	cpse	r24, r1
 93a:	1d c0       	rjmp	.+58     	; 0x976 <sos_init+0x42>
 93c:	0e 94 56 03 	call	0x6ac	; 0x6ac <TIMER0_Init>
 940:	0e 94 b7 03 	call	0x76e	; 0x76e <TIMER0_OV_InterruptEnable>
 944:	8f e5       	ldi	r24, 0x5F	; 95
 946:	94 e0       	ldi	r25, 0x04	; 4
 948:	0e 94 89 03 	call	0x712	; 0x712 <TIMER0_OV_SetCallBack>
 94c:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Init_All>
 950:	0e 94 b9 02 	call	0x572	; 0x572 <EXI_Init>
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	0e 94 47 02 	call	0x48e	; 0x48e <EXI_Enable>
 95a:	62 e0       	ldi	r22, 0x02	; 2
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <EXI_TriggerEdge>
 962:	61 e9       	ldi	r22, 0x91	; 145
 964:	74 e0       	ldi	r23, 0x04	; 4
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	0e 94 c6 02 	call	0x58c	; 0x58c <EXI_SetCallBack>
 96c:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_g_init_counter>
 970:	8f 5f       	subi	r24, 0xFF	; 255
 972:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <u8_g_init_counter>
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	08 95       	ret

0000097a <sos_create_task>:
 97a:	fc 01       	movw	r30, r24
 97c:	89 2b       	or	r24, r25
 97e:	09 f4       	brne	.+2      	; 0x982 <sos_create_task+0x8>
 980:	43 c0       	rjmp	.+134    	; 0xa08 <sos_create_task+0x8e>
 982:	84 81       	ldd	r24, Z+4	; 0x04
 984:	95 81       	ldd	r25, Z+5	; 0x05
 986:	89 2b       	or	r24, r25
 988:	71 f0       	breq	.+28     	; 0x9a6 <sos_create_task+0x2c>
 98a:	86 81       	ldd	r24, Z+6	; 0x06
 98c:	97 81       	ldd	r25, Z+7	; 0x07
 98e:	89 2b       	or	r24, r25
 990:	61 f0       	breq	.+24     	; 0x9aa <sos_create_task+0x30>
 992:	82 81       	ldd	r24, Z+2	; 0x02
 994:	93 81       	ldd	r25, Z+3	; 0x03
 996:	0b 97       	sbiw	r24, 0x0b	; 11
 998:	50 f4       	brcc	.+20     	; 0x9ae <sos_create_task+0x34>
 99a:	80 81       	ld	r24, Z
 99c:	91 81       	ldd	r25, Z+1	; 0x01
 99e:	0b 97       	sbiw	r24, 0x0b	; 11
 9a0:	40 f4       	brcc	.+16     	; 0x9b2 <sos_create_task+0x38>
 9a2:	83 e0       	ldi	r24, 0x03	; 3
 9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <sos_create_task+0x3a>
 9a6:	82 e0       	ldi	r24, 0x02	; 2
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <sos_create_task+0x3a>
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <sos_create_task+0x3a>
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <sos_create_task+0x3a>
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	12 c0       	rjmp	.+36     	; 0x9dc <sos_create_task+0x62>
 9b8:	a9 2f       	mov	r26, r25
 9ba:	b0 e0       	ldi	r27, 0x00	; 0
 9bc:	aa 0f       	add	r26, r26
 9be:	bb 1f       	adc	r27, r27
 9c0:	aa 0f       	add	r26, r26
 9c2:	bb 1f       	adc	r27, r27
 9c4:	aa 0f       	add	r26, r26
 9c6:	bb 1f       	adc	r27, r27
 9c8:	ad 55       	subi	r26, 0x5D	; 93
 9ca:	bf 4f       	sbci	r27, 0xFF	; 255
 9cc:	4d 91       	ld	r20, X+
 9ce:	5c 91       	ld	r21, X
 9d0:	20 81       	ld	r18, Z
 9d2:	31 81       	ldd	r19, Z+1	; 0x01
 9d4:	42 17       	cp	r20, r18
 9d6:	53 07       	cpc	r21, r19
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <sos_create_task+0x68>
 9da:	9f 5f       	subi	r25, 0xFF	; 255
 9dc:	9a 30       	cpi	r25, 0x0A	; 10
 9de:	60 f3       	brcs	.-40     	; 0x9b8 <sos_create_task+0x3e>
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <sos_create_task+0x6a>
 9e2:	82 e0       	ldi	r24, 0x02	; 2
 9e4:	83 30       	cpi	r24, 0x03	; 3
 9e6:	89 f4       	brne	.+34     	; 0xa0a <sos_create_task+0x90>
 9e8:	a0 81       	ld	r26, Z
 9ea:	b1 81       	ldd	r27, Z+1	; 0x01
 9ec:	aa 0f       	add	r26, r26
 9ee:	bb 1f       	adc	r27, r27
 9f0:	aa 0f       	add	r26, r26
 9f2:	bb 1f       	adc	r27, r27
 9f4:	aa 0f       	add	r26, r26
 9f6:	bb 1f       	adc	r27, r27
 9f8:	ad 55       	subi	r26, 0x5D	; 93
 9fa:	bf 4f       	sbci	r27, 0xFF	; 255
 9fc:	98 e0       	ldi	r25, 0x08	; 8
 9fe:	01 90       	ld	r0, Z+
 a00:	0d 92       	st	X+, r0
 a02:	9a 95       	dec	r25
 a04:	e1 f7       	brne	.-8      	; 0x9fe <sos_create_task+0x84>
 a06:	08 95       	ret
 a08:	83 e0       	ldi	r24, 0x03	; 3
 a0a:	08 95       	ret

00000a0c <sos_start_check>:
 *																												
 * @brief                                               :   local function to check for start button press and resumes the timer counting				
 *																															
 */
 void sos_start_check (void)
 {
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	1f 92       	push	r1
 a12:	cd b7       	in	r28, 0x3d	; 61
 a14:	de b7       	in	r29, 0x3e	; 62
	 u8 u8_state;
	 BUTTON_read(BUTTON0,&u8_state);
 a16:	be 01       	movw	r22, r28
 a18:	6f 5f       	subi	r22, 0xFF	; 255
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	88 e1       	ldi	r24, 0x18	; 24
 a1e:	0e 94 83 00 	call	0x106	; 0x106 <BUTTON_read>
	 if (u8_state==LOW)
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	81 11       	cpse	r24, r1
 a26:	10 c0       	rjmp	.+32     	; 0xa48 <sos_start_check+0x3c>
	 {
		 timer_start(TIMER0_SCALER_64);
 a28:	83 e0       	ldi	r24, 0x03	; 3
 a2a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <timer_start>
		 u8_g_start_flag=HIGH;
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		 
		 while (u8_state==LOW)
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <sos_start_check+0x36>
		 {
			 BUTTON_read(BUTTON0,&u8_state);
 a36:	be 01       	movw	r22, r28
 a38:	6f 5f       	subi	r22, 0xFF	; 255
 a3a:	7f 4f       	sbci	r23, 0xFF	; 255
 a3c:	88 e1       	ldi	r24, 0x18	; 24
 a3e:	0e 94 83 00 	call	0x106	; 0x106 <BUTTON_read>
	 if (u8_state==LOW)
	 {
		 timer_start(TIMER0_SCALER_64);
		 u8_g_start_flag=HIGH;
		 
		 while (u8_state==LOW)
 a42:	89 81       	ldd	r24, Y+1	; 0x01
 a44:	88 23       	and	r24, r24
 a46:	b9 f3       	breq	.-18     	; 0xa36 <sos_start_check+0x2a>
		 {
			 BUTTON_read(BUTTON0,&u8_state);
		 }
	 }
 }
 a48:	0f 90       	pop	r0
 a4a:	df 91       	pop	r29
 a4c:	cf 91       	pop	r28
 a4e:	08 95       	ret

00000a50 <sos_run>:
 *              SOS_STATUS_INVALID_STATE				:   In case the SOS wasn't initialized				
 *																												
 */

void sos_run (void)
{
 a50:	9f 92       	push	r9
 a52:	af 92       	push	r10
 a54:	bf 92       	push	r11
 a56:	cf 92       	push	r12
 a58:	df 92       	push	r13
 a5a:	ef 92       	push	r14
 a5c:	ff 92       	push	r15
 a5e:	0f 93       	push	r16
 a60:	1f 93       	push	r17
 a62:	cf 93       	push	r28
 a64:	df 93       	push	r29
	
	if (u8_g_init_counter == INIT_SUCCESS)
 a66:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_g_init_counter>
 a6a:	81 30       	cpi	r24, 0x01	; 1
 a6c:	09 f0       	breq	.+2      	; 0xa70 <sos_run+0x20>
 a6e:	58 c0       	rjmp	.+176    	; 0xb20 <sos_run+0xd0>
	{
		timer_start(TIMER0_SCALER_64);
 a70:	83 e0       	ldi	r24, 0x03	; 3
 a72:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <timer_start>
		
		while (1)
		{
			sos_start_check();
 a76:	0e 94 06 05 	call	0xa0c	; 0xa0c <sos_start_check>
			if (u8_check_flag == HIGH && u8_g_start_flag == HIGH)
 a7a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <u8_check_flag>
 a7e:	81 30       	cpi	r24, 0x01	; 1
 a80:	d1 f7       	brne	.-12     	; 0xa76 <sos_run+0x26>
 a82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a86:	81 30       	cpi	r24, 0x01	; 1
 a88:	b1 f7       	brne	.-20     	; 0xa76 <sos_run+0x26>
 a8a:	42 c0       	rjmp	.+132    	; 0xb10 <sos_run+0xc0>
			{
				for (u8 L_index = INITIAL_START; L_index < NO_OF_TASKS; L_index++)
				{
				
					if (g_database[L_index].pfTask != NULLPTR)
 a8c:	89 2d       	mov	r24, r9
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	fc 01       	movw	r30, r24
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	ee 0f       	add	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	ed 55       	subi	r30, 0x5D	; 93
 aa0:	ff 4f       	sbci	r31, 0xFF	; 255
 aa2:	c6 81       	ldd	r28, Z+6	; 0x06
 aa4:	d7 81       	ldd	r29, Z+7	; 0x07
 aa6:	20 97       	sbiw	r28, 0x00	; 0
 aa8:	89 f1       	breq	.+98     	; 0xb0c <sos_run+0xbc>
					{
						if ( u64_g_periodic_check_time % g_database[L_index].u16_periodicity == LOW)
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	88 0f       	add	r24, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	88 0f       	add	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	fc 01       	movw	r30, r24
 ab8:	ed 55       	subi	r30, 0x5D	; 93
 aba:	ff 4f       	sbci	r31, 0xFF	; 255
 abc:	04 81       	ldd	r16, Z+4	; 0x04
 abe:	15 81       	ldd	r17, Z+5	; 0x05
 ac0:	b0 91 f4 00 	lds	r27, 0x00F4	; 0x8000f4 <u64_g_periodic_check_time>
 ac4:	a0 91 f5 00 	lds	r26, 0x00F5	; 0x8000f5 <u64_g_periodic_check_time+0x1>
 ac8:	f0 91 f6 00 	lds	r31, 0x00F6	; 0x8000f6 <u64_g_periodic_check_time+0x2>
 acc:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <u64_g_periodic_check_time+0x3>
 ad0:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <u64_g_periodic_check_time+0x4>
 ad4:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <u64_g_periodic_check_time+0x5>
 ad8:	a0 2e       	mov	r10, r16
 ada:	b1 2e       	mov	r11, r17
 adc:	c1 2c       	mov	r12, r1
 ade:	d1 2c       	mov	r13, r1
 ae0:	e1 2c       	mov	r14, r1
 ae2:	f1 2c       	mov	r15, r1
 ae4:	00 e0       	ldi	r16, 0x00	; 0
 ae6:	10 e0       	ldi	r17, 0x00	; 0
 ae8:	2b 2f       	mov	r18, r27
 aea:	3a 2f       	mov	r19, r26
 aec:	4f 2f       	mov	r20, r31
 aee:	5e 2f       	mov	r21, r30
 af0:	69 2f       	mov	r22, r25
 af2:	78 2f       	mov	r23, r24
 af4:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u64_g_periodic_check_time+0x6>
 af8:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <u64_g_periodic_check_time+0x7>
 afc:	0e 94 9c 05 	call	0xb38	; 0xb38 <__umoddi3>
 b00:	a0 e0       	ldi	r26, 0x00	; 0
 b02:	0e 94 07 06 	call	0xc0e	; 0xc0e <__cmpdi2_s8>
 b06:	11 f4       	brne	.+4      	; 0xb0c <sos_run+0xbc>
						{
							g_database[L_index].pfTask();						
 b08:	fe 01       	movw	r30, r28
 b0a:	09 95       	icall
		while (1)
		{
			sos_start_check();
			if (u8_check_flag == HIGH && u8_g_start_flag == HIGH)
			{
				for (u8 L_index = INITIAL_START; L_index < NO_OF_TASKS; L_index++)
 b0c:	93 94       	inc	r9
 b0e:	01 c0       	rjmp	.+2      	; 0xb12 <sos_run+0xc2>
 b10:	91 2c       	mov	r9, r1
 b12:	f9 e0       	ldi	r31, 0x09	; 9
 b14:	f9 15       	cp	r31, r9
 b16:	08 f0       	brcs	.+2      	; 0xb1a <sos_run+0xca>
 b18:	b9 cf       	rjmp	.-142    	; 0xa8c <sos_run+0x3c>
							g_database[L_index].pfTask();						
						}
					}
				
				}
				u8_check_flag = LOW;
 b1a:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <u8_check_flag>
 b1e:	ab cf       	rjmp	.-170    	; 0xa76 <sos_run+0x26>
	}
	else
	{
		//Don nothing
	}
}
 b20:	df 91       	pop	r29
 b22:	cf 91       	pop	r28
 b24:	1f 91       	pop	r17
 b26:	0f 91       	pop	r16
 b28:	ff 90       	pop	r15
 b2a:	ef 90       	pop	r14
 b2c:	df 90       	pop	r13
 b2e:	cf 90       	pop	r12
 b30:	bf 90       	pop	r11
 b32:	af 90       	pop	r10
 b34:	9f 90       	pop	r9
 b36:	08 95       	ret

00000b38 <__umoddi3>:
 b38:	68 94       	set
 b3a:	01 c0       	rjmp	.+2      	; 0xb3e <__udivdi3_umoddi3>

00000b3c <__udivdi3>:
 b3c:	e8 94       	clt

00000b3e <__udivdi3_umoddi3>:
 b3e:	8f 92       	push	r8
 b40:	9f 92       	push	r9
 b42:	cf 93       	push	r28
 b44:	df 93       	push	r29
 b46:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmod64>
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	9f 90       	pop	r9
 b50:	8f 90       	pop	r8
 b52:	08 95       	ret

00000b54 <__udivmod64>:
 b54:	88 24       	eor	r8, r8
 b56:	99 24       	eor	r9, r9
 b58:	f4 01       	movw	r30, r8
 b5a:	e4 01       	movw	r28, r8
 b5c:	b0 e4       	ldi	r27, 0x40	; 64
 b5e:	9f 93       	push	r25
 b60:	aa 27       	eor	r26, r26
 b62:	9a 15       	cp	r25, r10
 b64:	8b 04       	cpc	r8, r11
 b66:	9c 04       	cpc	r9, r12
 b68:	ed 05       	cpc	r30, r13
 b6a:	fe 05       	cpc	r31, r14
 b6c:	cf 05       	cpc	r28, r15
 b6e:	d0 07       	cpc	r29, r16
 b70:	a1 07       	cpc	r26, r17
 b72:	98 f4       	brcc	.+38     	; 0xb9a <__udivmod64+0x46>
 b74:	ad 2f       	mov	r26, r29
 b76:	dc 2f       	mov	r29, r28
 b78:	cf 2f       	mov	r28, r31
 b7a:	fe 2f       	mov	r31, r30
 b7c:	e9 2d       	mov	r30, r9
 b7e:	98 2c       	mov	r9, r8
 b80:	89 2e       	mov	r8, r25
 b82:	98 2f       	mov	r25, r24
 b84:	87 2f       	mov	r24, r23
 b86:	76 2f       	mov	r23, r22
 b88:	65 2f       	mov	r22, r21
 b8a:	54 2f       	mov	r21, r20
 b8c:	43 2f       	mov	r20, r19
 b8e:	32 2f       	mov	r19, r18
 b90:	22 27       	eor	r18, r18
 b92:	b8 50       	subi	r27, 0x08	; 8
 b94:	31 f7       	brne	.-52     	; 0xb62 <__udivmod64+0xe>
 b96:	bf 91       	pop	r27
 b98:	27 c0       	rjmp	.+78     	; 0xbe8 <__udivmod64+0x94>
 b9a:	1b 2e       	mov	r1, r27
 b9c:	bf 91       	pop	r27
 b9e:	bb 27       	eor	r27, r27
 ba0:	22 0f       	add	r18, r18
 ba2:	33 1f       	adc	r19, r19
 ba4:	44 1f       	adc	r20, r20
 ba6:	55 1f       	adc	r21, r21
 ba8:	66 1f       	adc	r22, r22
 baa:	77 1f       	adc	r23, r23
 bac:	88 1f       	adc	r24, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	88 1c       	adc	r8, r8
 bb2:	99 1c       	adc	r9, r9
 bb4:	ee 1f       	adc	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	cc 1f       	adc	r28, r28
 bba:	dd 1f       	adc	r29, r29
 bbc:	aa 1f       	adc	r26, r26
 bbe:	bb 1f       	adc	r27, r27
 bc0:	8a 14       	cp	r8, r10
 bc2:	9b 04       	cpc	r9, r11
 bc4:	ec 05       	cpc	r30, r12
 bc6:	fd 05       	cpc	r31, r13
 bc8:	ce 05       	cpc	r28, r14
 bca:	df 05       	cpc	r29, r15
 bcc:	a0 07       	cpc	r26, r16
 bce:	b1 07       	cpc	r27, r17
 bd0:	48 f0       	brcs	.+18     	; 0xbe4 <__udivmod64+0x90>
 bd2:	8a 18       	sub	r8, r10
 bd4:	9b 08       	sbc	r9, r11
 bd6:	ec 09       	sbc	r30, r12
 bd8:	fd 09       	sbc	r31, r13
 bda:	ce 09       	sbc	r28, r14
 bdc:	df 09       	sbc	r29, r15
 bde:	a0 0b       	sbc	r26, r16
 be0:	b1 0b       	sbc	r27, r17
 be2:	21 60       	ori	r18, 0x01	; 1
 be4:	1a 94       	dec	r1
 be6:	e1 f6       	brne	.-72     	; 0xba0 <__udivmod64+0x4c>
 be8:	2e f4       	brtc	.+10     	; 0xbf4 <__udivmod64+0xa0>
 bea:	94 01       	movw	r18, r8
 bec:	af 01       	movw	r20, r30
 bee:	be 01       	movw	r22, r28
 bf0:	cd 01       	movw	r24, r26
 bf2:	00 0c       	add	r0, r0
 bf4:	08 95       	ret

00000bf6 <__adddi3_s8>:
 bf6:	00 24       	eor	r0, r0
 bf8:	a7 fd       	sbrc	r26, 7
 bfa:	00 94       	com	r0
 bfc:	2a 0f       	add	r18, r26
 bfe:	30 1d       	adc	r19, r0
 c00:	40 1d       	adc	r20, r0
 c02:	50 1d       	adc	r21, r0
 c04:	60 1d       	adc	r22, r0
 c06:	70 1d       	adc	r23, r0
 c08:	80 1d       	adc	r24, r0
 c0a:	90 1d       	adc	r25, r0
 c0c:	08 95       	ret

00000c0e <__cmpdi2_s8>:
 c0e:	00 24       	eor	r0, r0
 c10:	a7 fd       	sbrc	r26, 7
 c12:	00 94       	com	r0
 c14:	2a 17       	cp	r18, r26
 c16:	30 05       	cpc	r19, r0
 c18:	40 05       	cpc	r20, r0
 c1a:	50 05       	cpc	r21, r0
 c1c:	60 05       	cpc	r22, r0
 c1e:	70 05       	cpc	r23, r0
 c20:	80 05       	cpc	r24, r0
 c22:	90 05       	cpc	r25, r0
 c24:	08 95       	ret

00000c26 <_exit>:
 c26:	f8 94       	cli

00000c28 <__stop_program>:
 c28:	ff cf       	rjmp	.-2      	; 0xc28 <__stop_program>
